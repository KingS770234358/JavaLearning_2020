<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- aspect introduction 测试 -->
    <!-- 目标对象 Developer使用下面例子定义的developer -->
    <aop:aspectj-autoproxy proxy-target-class="true">
    </aop:aspectj-autoproxy>
    <bean id="testerIntroduction" class="com.wq.AOPtest.IntroductionAspect"></bean>


<!--    <bean id="messageService" class="com.wq.ssm.MessageServiceImpl"/>-->
    <!-- 测试Instruction增强 -->
    <!-- 将scope全部设置为prototype
         包括在 proxyFactoryBean 中 通过targetName来指定目标对象(用target-ref好像效果是一样的。。。)
         都是为了 保证每次取得的代理对象都持有各自的状态和行为
         哪个bean没设置成prototype，哪个bean就是共享的
    -->
    <bean id="developer" class="com.wq.AOPtest.Developer" scope="prototype"/>
    <bean  id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype"
           p:targetName="developer"
           p:proxyInterfaces="com.wq.AOPtest.IDeveloper, com.wq.AOPtest.ITester"
           p:interceptorNames="introduceAdvisor">
    </bean>
    <!-- 如果使用的是DelegatingIntroductionInterceptor要设置成prototype才能保证各个代理对象独立
         如果使用DelegatePerTargetObjectIntroductionInterceptor，不设置成prototype也可以保证独立性
    -->
    <bean id="introduceAdvisor" class="org.springframework.aop.support.DefaultIntroductionAdvisor">
        <constructor-arg>
            <bean id="dii" class="org.springframework.aop.support.DelegatePerTargetObjectIntroductionInterceptor" >
                <!-- DelegatingIntroductionInterceptor使用的参数 -->
                <!--
                <constructor-arg>
                    <bean id="tester_delegate" class="com.wq.AOPtest.Tester"/>
                </constructor-arg>
                -->
                <!-- DelegatePerTargetObjectIntroductionInterceptor使用的参数
                     这里要注意 第一个参数是【实现】 第二个参数是【接口】
                     如果顺序错误则报错：java.lang.IllegalArgumentException: Cannot create default implementation for 'com.wq.AOPtest.Tester'
                     mixin (com.wq.AOPtest.ITester): java.lang.InstantiationException: com.wq.AOPtest.ITester
                -->
                <constructor-arg>
                    <value>com.wq.AOPtest.Tester</value>
                </constructor-arg>
                <constructor-arg>
                    <value>com.wq.AOPtest.ITester</value>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="com.wq.AOPtest.ITester"></constructor-arg>
    </bean>

    <!-- 注解扫描 -->
    <context:component-scan base-package="com.wq.AOPtest"/>
<!--    <bean id="cycleDependencyA" class="com.wq.SpringQA.CycleDependency.Service.CycleDependencyA">-->
<!--    <constructor-arg ref="cycleDependencyB"/>-->
<!--    </bean>-->
<!--    <bean id="cycleDependencyB" class="com.wq.SpringQA.CycleDependency.Service.CycleDependencyB">-->
<!--        <constructor-arg ref="cycleDependencyC"/>-->
<!--    </bean>-->
<!--    <bean id="cycleDependencyC" class="com.wq.SpringQA.CycleDependency.Service.CycleDependencyC">-->
<!--        <constructor-arg ref="cycleDependencyA"/>-->
<!--    </bean>-->


    <!--    <bean id="beanPostProcessor" class="com.wq.SpringQA.MyBeanPostProcessor"></bean>-->
    <!--    <bean id="instantiationAwareBeanPostProcessor" class="com.wq.SpringQA.MyInstantiationAwareBeanPostProcessor"></bean>-->
    <!--    <bean id="beanFactoryPostProcessor" class="com.wq.SpringQA.MyBeanFactoryPostProcessor"></bean>-->
    <!--    <bean id="person111" class="com.wq.SpringQA.pojo.Person" init-method="myInit"-->
    <!--          destroy-method="myDestory" scope="singleton" p:name="张三" p:address="广州"-->
    <!--          p:phone="159000000" />-->
</beans>